package com.example.asignyouaddress;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import org.json.JSONException;import org.json.JSONObject;import com.amap.api.location.AMapLocation;import com.amap.api.location.AMapLocationListener;import com.amap.api.location.LocationManagerProxy;import com.amap.api.location.LocationProviderProxy;import com.baidu.android.pushservice.PushConstants;import com.baidu.android.pushservice.PushManager;import com.example.asignyouaddress.net.AsyncTaskUtil;import com.example.asignyouaddress.util.Content;import com.example.asignyouaddress.util.Util;import com.webdesign688.emsd.R;import android.app.Activity;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.ActivityInfo;import android.location.Location;import android.os.Bundle;import android.os.Handler;import android.telephony.TelephonyManager;import android.text.TextUtils;import android.view.View.OnClickListener;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.widget.Button;import android.widget.LinearLayout;import android.widget.Toast;public class SignActivity extends Activity implements AMapLocationListener, OnClickListener{	 private Button ui_login_btn;	 private LocationManagerProxy mLocationManagerProxy;	private LinearLayout mLLsend;	private com.example.asignyouaddress.view.ProgressDialog dialog;	private String iSCAN;	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		this.requestWindowFeature(Window.FEATURE_NO_TITLE);          setContentView(R.layout.chosereserva);  		dialog =new com.example.asignyouaddress.view.ProgressDialog(SignActivity.this);        /*  PushManager.startWork(getApplicationContext(),PushConstants.LOGIN_TYPE_API_KEY,                  Utils.getMetaValue(SignActivity.this, "api_key"));*/		SharedPreferences mySharedPreferences1 = getSharedPreferences(				"ASIGN", Activity.MODE_PRIVATE);		 iSCAN = mySharedPreferences1.getString("ISCAN", "0");  		          init();          initView();          	}	private void initView() {		mLLsend =(LinearLayout)this.findViewById(R.id.mLLsend);		mLLsend.setOnClickListener(this);			}	/**	 * 初始化定位	 */	private void init() {		// 初始化定位，只采用网络定位				mLocationManagerProxy = LocationManagerProxy.getInstance(this);		mLocationManagerProxy.setGpsEnable(false);		// 此方法为每隔固定时间会发起一次定位请求，为了减少电量消耗或网络流量消耗，		// 注意设置合适的定位时间的间隔（最小间隔支持为2000ms），并且在合适时间调用removeUpdates()方法来取消定位请求		// 在定位结束后，在合适的生命周期调用destroy()方法		// 其中如果间隔时间为-1，则定位只定一次,		// 在单次定位情况下，定位无论成功与否，都无需调用removeUpdates()方法移除请求，定位sdk内部会移除		// mLocationManagerProxy.requestLocationData(LocationProviderProxy.AMapNetwork, -1, 15, this);			}	private void initData(String str1,String str2) {		SharedPreferences mySharedPreferences1 = getSharedPreferences(				"ASIGN", Activity.MODE_PRIVATE);		String userID = mySharedPreferences1.getString("UserID", "");	List<String> list = new ArrayList<String>();		list.add("userID");		list.add("Address");		list.add("LatLong");		List<String> list1 = new ArrayList<String>();		list1.add(userID);		list1.add(str2);		list1.add(str1);		AsyncTaskUtil.getJson(list, list1, handler, dialog, Content.REGISTER,				SignActivity.this, 3);			}	private Handler handler = new Handler() {		public void handleMessage(android.os.Message msg) {			switch (msg.what) {			case 1:				Toast.makeText(getApplicationContext(),						getResources().getString(R.string.toast11), 1).show();				break;			case 3:				String json = (String) msg.obj;				if (!TextUtils.isEmpty(json)) {					try {						JSONObject jRoot = new JSONObject(json);						int code = jRoot.getInt("code");						if (code == 1) {							SharedPreferences mySharedPreferences1 = getSharedPreferences(									"ASIGN", Activity.MODE_PRIVATE);							SharedPreferences.Editor editor1 = mySharedPreferences1									.edit();							editor1.putString("ISCAN", 0+"");							editor1.commit();							Toast.makeText(getApplicationContext(), R.string.toast, 1).show();																								} else if (code == 0) {							// 跳转到注册界面							// startActivity(new Intent(getApplicationContext(),							// RegActivity.class));							String msg1 = jRoot.getString("msg");							Toast.makeText(getApplicationContext(), msg1, 0)									.show();																				}					} catch (JSONException e) {						// TODO Auto-generated catch block						e.printStackTrace();					}				}				break;			default:				break;			}		}	};	@Override	public void onLocationChanged(Location amapLocation) {	}	@Override	public void onStatusChanged(String provider, int status, Bundle extras) {		// TODO Auto-generated method stub			}	@Override	public void onProviderEnabled(String provider) {		// TODO Auto-generated method stub			}	@Override	public void onProviderDisabled(String provider) {		// TODO Auto-generated method stub			}	@Override	public void onLocationChanged(AMapLocation amapLocation) {		Toast.makeText(getApplicationContext(), amapLocation.getLatitude() + "  "		+ amapLocation.getLongitude()+"  "+amapLocation.getAddress(), 1).show();		initData(amapLocation.getLatitude()+","+amapLocation.getLongitude(),amapLocation.getAddress());	}	@Override	public void onClick(View v) {		switch (v.getId()) {		case R.id.mLLsend:			if(!iSCAN.equals("0")){			if(Util.isNetworkConnected(getApplicationContext())){				//ui_login_btn.setClickable(false);				//ui_login_btn.setBackgroundColor(getResources().getColor(R.color.gray));                                Toast.makeText(getApplicationContext(), getResources().getString(R.string.loadinglocal), 0).show();				 mLocationManagerProxy.requestLocationData(LocationProviderProxy.AMapNetwork, -1, 15, this);			}else{				Toast.makeText(getApplicationContext(),getResources().getString(R.string.toast11), 1).show();			}}else{				Toast.makeText(getApplicationContext(), R.string.toast1, 1).show();			}			break;		default:			break;		}	}}