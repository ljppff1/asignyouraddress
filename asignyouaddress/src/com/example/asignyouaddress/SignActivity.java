package com.example.asignyouaddress;import java.text.SimpleDateFormat;import java.util.Date;import com.amap.api.location.AMapLocation;import com.amap.api.location.AMapLocationListener;import com.amap.api.location.LocationManagerProxy;import com.amap.api.location.LocationProviderProxy;import com.example.asignyouaddress.util.Util;import android.app.Activity;import android.content.pm.ActivityInfo;import android.location.Location;import android.os.Bundle;import android.view.View.OnClickListener;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.widget.Button;import android.widget.Toast;public class SignActivity extends Activity implements AMapLocationListener, OnClickListener{	 private Button ui_login_btn;	 private LocationManagerProxy mLocationManagerProxy;	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		this.requestWindowFeature(Window.FEATURE_NO_TITLE);          setContentView(R.layout.sign);          init();          initView();          	}	private void initView() {		ui_login_btn =(Button)this.findViewById(R.id.ui_login_btn);		//ui_login_btn.setBackgroundColor(getResources().getColor(R.color.gray));		ui_login_btn.setOnClickListener(this);			}	/**	 * 初始化定位	 */	private void init() {		// 初始化定位，只采用网络定位		mLocationManagerProxy = LocationManagerProxy.getInstance(this);		mLocationManagerProxy.setGpsEnable(false);		// 此方法为每隔固定时间会发起一次定位请求，为了减少电量消耗或网络流量消耗，		// 注意设置合适的定位时间的间隔（最小间隔支持为2000ms），并且在合适时间调用removeUpdates()方法来取消定位请求		// 在定位结束后，在合适的生命周期调用destroy()方法		// 其中如果间隔时间为-1，则定位只定一次,		// 在单次定位情况下，定位无论成功与否，都无需调用removeUpdates()方法移除请求，定位sdk内部会移除		// mLocationManagerProxy.requestLocationData(LocationProviderProxy.AMapNetwork, -1, 15, this);			}	private void initData() {			}		@Override	public void onLocationChanged(Location amapLocation) {	}	@Override	public void onStatusChanged(String provider, int status, Bundle extras) {		// TODO Auto-generated method stub			}	@Override	public void onProviderEnabled(String provider) {		// TODO Auto-generated method stub			}	@Override	public void onProviderDisabled(String provider) {		// TODO Auto-generated method stub			}	@Override	public void onLocationChanged(AMapLocation amapLocation) {		Toast.makeText(getApplicationContext(), amapLocation.getLatitude() + "  "		+ amapLocation.getLongitude()+"  "+amapLocation.getAddress(), 1).show();			}	@Override	public void onClick(View v) {		switch (v.getId()) {		case R.id.ui_login_btn:			if(Util.isNetworkConnected(getApplicationContext())){				ui_login_btn.setClickable(false);				ui_login_btn.setBackgroundColor(getResources().getColor(R.color.gray));                 Toast.makeText(getApplicationContext(), getResources().getString(R.string.loadinglocal), 0).show();				 mLocationManagerProxy.requestLocationData(LocationProviderProxy.AMapNetwork, -1, 15, this);			}else{				Toast.makeText(getApplicationContext(),getResources().getString(R.string.toast11), 1).show();			}			break;		default:			break;		}	}}